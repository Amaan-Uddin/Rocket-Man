We are building a simple dummy rocketman website which provides professional services for Rockets

Day 1:

HEADER:

-we started of with a simple html file , we linked it up with our style sheet and our JS file.
 - while liking our JS file, we specified the link in the head of  our html file with a defer attribute.
   The 'defer' allows the html body to completely render before executing the JS file.

-added some basic html tags to our <header> like a <nav> with a container class and , inside that container
 we had our logo <div> and our links

-the layout we preferred for the header was flex-box

-since the layout was flex-box, we implemented the width of the header as 100%, but since all the elements
 of our header are stored in our container which has a max-width of 75rem, the contentns we organized properly

-we then made the width of the link class to be 100% so that there would be free space present,
 this availability of free space enables us to position our links at the end of the container

-KEY POINT: we aligned all the flex items at the center to avoid any mess

-from there we customized our links and gave them paddings and a font

-we also incresed the height of our container so that there would be some space in the top section of
 our html body

LANDING PAGE:

-we started off with giving the landing page a margin = height of header

-we then proceed with trying out different options for the background image, and there were 2
 --firtly we implement the image directly to the html body using a image tag
 --secondly, we apply a background image to the landing section

-we set up the margin, the height and width of our image and we also set certain properties related to our 
 image, i.e. bg-size: cover and bg-position center

-we then proceed further with our welcoming statement and a button for contact purpose

-now comes the difficult part, we are faced with an option, either we choose grid as our layout or flex
 --both are great in thier own ways, but using a flex to align the contents at the center of the section
   seems more of a viable option header

-KEY POINT: -since the section is a flex-box, all the childer are subjected to flex-properies and can use them
             accordingly.

            EXAMPLE: our landing section is of flex type, and hence our container can align itself
            inside the flex box as it is a direct child of it.

            -we can change the brighntess of the background image using the linear-gradient function

-we then gave each of the seperate divs(landing-text and cta) thier respective CSS and customized thier
 element and children

-for the contact button, to lower the button a bit and to avoid any miss assembling of our text content
 we applied relative postioning to our button and lowered it by 2rems

Day 2:

SERVICE CARDS:

-the idea was quite simple, we would just use a grid layout and make each card a flex-box

-was a bit skeptical about the images not being the same size, but it worked wonders
 -apparently since both the cards have the same width and since both have equal html elements, the 
  images took up the exact space and were symmetrical

-we then proceed with making another flex-box for the text content of the card and we ran into some issues
 -ISSUES: 1) if the contents don't have the same box-height then the images will be un-symmetrical.
             This is an issue which will arise if the screen width is at max 728px or a.k.a a tablet.
        
          2) we haven't found a solution to prevent the images form falling apart of their symmerty
             so on each screen width we need to apply a custom CSS for that width

-when dealing with the buttons we discovered that the span element is not effected my the parent class 
 pseudo selection, meaning that the .btn pseudo selectors will not effect our span element

-KEY POINT: -we managed to change the color of the Nav-bar links when they hover over the landing page
             -we manage to pull the CSS way of it rather than manupulating it directly through JS

            -got a bit familiar with getBoundingClientRect() function and it's properties

            -we managed to scale down the webpage to 90% on reload, meaning our initial zoom will be from 0.9
            -> document.body.style.zoom = .9


Day 4:

SERVICE TABS:
-probably one of the hardest sections i've done yet

-started with working on implementing a sol to change the color of the links through JS, couldn't come up
 with anything, but i did discover what 'Interseting Observers API' are in the process and might try and implement them

-the most difficult part was not designing the website, it was designing the website while being sick and helpless
 -but we managed .

-it took me quite a while to figure out which layout to choose for the section element and it's children

-after that i decided to insert the image directly through an <img> tag, but that didn't end well
 -because without pre-fixig the height of the image as 33rem, the 2nd image would overflow it's parent
 and it lead to alot of issues, so we decided to implement these images as background-image of a <div>

-after that we had to figure out a way to implement those depth SERVICE box/cards and , was quite easy

all and all I'm not quite satisfied with today's progress, will diffenetly try and improve my design 
and layout

-KEY POINT: -we got to know about Intersecting Observers and Modal and Dialog elements

            -we discovred what scroll-animations are and how they can be implemented